// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin", "darwin-arm64", "linux-musl", "debian-openssl-1.1.x", "darwin"]
  previewFeatures = ["interactiveTransactions"]
  output = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  full_name               String
  email                   String   @unique
  phone                   String   @db.VarChar(11)
  cpf                     String   @unique @db.VarChar(11)
  birth_date              DateTime @db.Date
  password                String
  n_attempt               Int      @default(0)
  is_admin                Boolean  @default(false)
  blocked                 Boolean  @default(false)
  block_date              DateTime?
  created_at              DateTime @default(now())
  updated_at              DateTime?
  address                 Address?  @relation(fields: [address_id], references: [id])
  address_id              Int?      @unique
  accounts                Account[]
}

model Account {
  id                      String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user                    User       @relation(fields: [user_id], references: [id])
  user_id                 String     @db.Uuid
  transfer_password       String
  balance                 Decimal     @db.Decimal(13,2) @default(0.00)
  bank                    String      @default("RubBank S.A.")
  agency                  String      @default("0001") @db.VarChar(4)
  account_number          String      @db.VarChar(8) @unique
  type                    String      @db.VarChar(8) @default("checking")
  n_attempt               Int         @default(0)
  blocked                 Boolean     @default(false)
  block_date              DateTime?
  created_at              DateTime @default(now())
  updated_at              DateTime?     
  transfered_from         Transfer[]  @relation("TransferFrom")
  transfered_to           Transfer[]  @relation("TransferTo")
}

model Address {
  id            Int      @id @default(autoincrement())
  user          User?    
  cep           String
  street        String
  number        String
  complement    String?
  neighborhood  String
  city          String
  state         String
  created_at    DateTime @default(now())
  updated_at    DateTime?
}

model Transfer {
  id                      String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  from_account            Account    @relation("TransferFrom" , fields: [from_account_id], references: [id])
  from_account_id         String      @db.Uuid   
  to_account              Account    @relation("TransferTo" , fields: [to_account_id], references: [id])
  to_account_id           String      @db.Uuid   
  value                   Decimal  @db.Decimal(13,2)
  description             String?  @db.VarChar(120)
  type                    String?    @default("TED")
  is_scheduled            Boolean    @default(false)
  schedule_date           DateTime?
  status                  TransferStatus?
  created_at              DateTime @default(now())
  updated_at              DateTime?
  notifications           Notification[]
}

model Notification {
  id                      Int         @id @default(autoincrement())
  transfer                Transfer?   @relation(fields: [transfer_id], references: [id])
  transfer_id             String      @db.Uuid        
  is_favorite             Boolean     @default(false)
  viewed_flag             Boolean     @default(false)
  created_at              DateTime    @default(now())
  updated_at              DateTime?
}

enum TransferStatus {
  SCHEDULED
  COMPLETED
  CANCELED
}